#!/bin/zsh -f
# wordstar, version 0.5.1
# copyright 2024 Erik Ben Heckman <erik@heckman.ca>
# shared under the terms of the MIT license


# wordstar launcher: Launch WordStar in an emulated DOS environment on MacOS
if [[ $1 = --trace ]]; then set -x; shift; fi
setopt NO_UNSET PIPE_FAIL ERR_RETURN

# default options
# all but `dosbox_path` can be modified with command-line options
# don't use '~' in paths as it wont be expanded

# [dosbox_path]="/opt/homebrew/bin/dosbox-x"

typeset -A SETTINGS=(
	[dosbox_path]="/Applications/dosbox-x.app/Contents/MacOS/dosbox-x"
	[dosbox_config_path]="$HOME/Applications/WordStar/DOS root/WS/DOSBox-X/dosbox-x.conf"
	[dosbox_mapper_path]="$HOME/Applications/WordStar/mapper-dosbox-x.map"
	[c_mount_path]="$HOME/Applications/WordStar/DOS root"
	[wordstar_executable]="WS"
	[fullscreen]=false
	[create_missing_paths]=false
	[shell_only]=false
	[documents_mount_path]=''
	[mount_drive]='D:'
	[verbose]=false
	[help_level]=4
)

typeset -a DOSBOX_ARGS=(
	-fastlaunch
	-noautoexec
	-set 'sdl fullscreen=false'
	-set 'ttf font=dejavusansmono'
	-set 'ttf fontbold=dejavusansmono-bold'
	-set 'ttf fontital=dejavusansmono-oblique'
	-set 'ttf fontboit=dejavusansmono-boldoblique'
	-set 'ttf ptsize=30'
	-set 'ttf lins=30'
	-set 'ttf cols=96'
)

# error codes

ERR_BAD_OPTIONS=69
ERR_NO_DOSBOX=3
ERR_NO_CONFIG=4
ERR_NO_C_MOUNT=5
ERR_NO_DOC_MOUNT=6
ERR_NO_NEW_DOC_MOUNT=7
ERR_NO_ACCESS=8
ERR_BAD_TARGET=9
ERR_BAD_DOS_NAME=10
ERR_INVALID_PARAMETER=11

typeset -a OPTIONS
typeset -a ARGUMENTS
typeset -a WORDSTAR_ARGS

help(){
	echo "USAGE: wordstar [OPTIONS] [--] [DOCUMENT]

    Launches WordStar in an emulated DOS environment
    using Robert J. Sawyer's WordStar archive: https://sfwriter.com/ws7.htm

    If DOCUMENT doesn't exist, a new document will be opened in WordStar.
    It's name will be appended with .WS if it doesn't already have that
    extension. Note: '--' is required if DOCUMENT begins with a '-'.

    OPTIONS:

    -P <PRESET>, --preset <PRESET>
            Start WordStar with one of the folloing presets:
                pristine   an unmodified out-of-the-box WordStar
                subdued    R.J. Sawyer's custom less-harsh colour scheme
                sawyer     R.J. Sawyer's preferred layout and extensive
                           customizations. Default help level is 2.
            For descriptions of the presets, see the following
            file in Robert J. Sawyer's WordStar archive:
            '${SETTINGS[c_mount_path]%/}/WS/VERSIONS.TXT'

    -H <HELP-LEVEL>, --helplevel <HELP-LEVEL>
            Start WordStar with onethe specified help level:
                0    About help leve 0
                1    About help leve 1
                2    About help leve 2
                3    About help leve 3
                4    About help leve 4 (default)

    -f, --fullscreen
            Run WordStar in fullscreen mode.

    -w, --window
            Run WordStar in a window, i.e. not fullscreen. (Default.)

    -p, --paths
            When creating a new document, create intermediate
            directories as required.

    -d <DOCUMENT-ROOT>, --documents <DOCUMENT-ROOT>
            Mount the specified path as the document root.
            Only files in this directory tree will be accessible by WordStar.
            With this option, if DOCUMENT is provided as a relative path,
            it will be relative to this path.

            Without this option, the directory containing DOCUMENT
            will be mounted, unless DOCUMENT is itself a directory,
            in which case it itself will be mounted.

    -c <PATH>, --conf <PATH>, --config <PATH>
            Specify a DOSBox-X config file file to use.

	-m <PATH>, --mapper
            Specify a DOSBox-X key-mapper file file to use.

    -x <PATH>, --dosbox <PATH>, --dosbox-x <PATH>
            Specify location DOSBox-x program to use.
            Default: '${SETTINGS[dosbox_path]}'.

    -s, --dos, --shell
            Don't launch WordStar, just launch DOSBox-X.

    -r <DOS-ROOT>, --root <DOS-ROOT>, --c-drive <DOS-ROOT>
            Specify a path to mount as the DOS root directory (C: drive)
            This directory must contain the WS directory
            from Robert J. Sawyer's WordStar archive.

    -h, --help
            Print this helpful message and exit.

    -V, --version
            Print version and copyright message and exit.


    ----------------------------------------------------------------------------

    For more information about WordStar, and Robert J. Sawyer's
    WordStar archive, see https://sfwriter.com/ws7.htm

    The archive is stored locally as:
        '${SETTINGS[c_mount_path]%/}/WS/'.

    Its README file can be found here:
        '${SETTINGS[c_mount_path]%/}/WS/-README.TXT'.


"
}

print_env(){
	set | grep -E "^(${(j:|:)@})=" >&2
}

print_globals(){
	print_env OPTIONS ARGUMENTS SETTINGS DOSBOX_ARGS WORDSTAR_ARGS
	# set | grep -E '^(SETTINGS|COMMAN_LINE_ARGUMENTS|DOSBOX_ARGS|WORDSTAR_ARGS)=' >&2
}

peek(){ printf "%s='%s'\n" $1 $2 >&2; }

error_no(){ local code=$1
	[[ $# -lt 2 ]] || shift && print -r ${(pj:\0:)@}
	return $code
}

error(){ local code=$?
	[[ $# -lt 1 ]] || print -r ${(pj:\0:)@}
	return $code
}

main(){

	local output_buffer
	# only non-error output is ever printed is help and version information

	# todo : try and rework this error reporting using redirection
	# something like main > >(do stdout stuff) 2> >(do stderr stuff))
	# or do that in the problem areas, like parsing options,
	# that was what led us here afterall.

	# if anonymous function returns non-0, stdout will be
	# interpreted as null-delimited error arguments
	output_buffer="$((){
		local argument target mount_path wordstar_document

		set_OPTIONS_and_ARGUMENTS "$@"
		set_SETTINGS

		argument=${ARGUMENTS[1]:-.}

		doc_mount=$(get_doc_mount "$argument") || error "$doc_mount" # uses SETTINGS
		target=$(get_target $argument $doc_mount ) || error "$target" "$doc_mount"
		ws_doc=$(get_ws_doc $doc_mount $target) || error "$ws_doc"

		set_WORDSTAR_ARGS "$ws_doc" # uses SETTINGS

		set_DOSBOX_ARGS "$doc_mount" # uses WORDSTAR_ARGS and SETTINGS

		# print_globals; exit

		launch_dosbox
	} "$@")" || die_by "${(0)output_buffer}"
	print -r "${(N)${(0)output_buffer}}"
}

set_OPTIONS_and_ARGUMENTS(){
	# todo
	# inseatead of 2>&1, to 2> >(die ERR_BAD_OPTIONS "$(cat -)")

	zparseopts -F -M -D -A OPTIONS $(help | help_opts) 2>&1 ||
		return $ERR_BAD_OPTIONS
	ARGUMENTS=("$@")
}

set_SETTINGS(){
	for option value in "${(@kvv)OPTIONS}"
	do process_option ${option#--} $value
	done

	# validation
	check_path -x ${SETTINGS[dosbox_path]} $ERR_NO_DOSBOX
	check_path -r ${SETTINGS[dosbox_config_path]} $ERR_NO_CONFIG
	check_path -d ${SETTINGS[c_mount_path]} $ERR_NO_C_MOUNT
}

check_path(){ check=$1 target=$2 error=$3
	[[ -z $target ]] || test $check $target || error_no $error "$target"
}


get_doc_mount(){ local arg=$1 doc_mount

	if [[ -n ${SETTINGS[documents_mount_path]} ]]
	then
		doc_mount=${SETTINGS[documents_mount_path]}

	elif [[ -d $1 ]] || [[ ! -e $1 && "${1[-1]}" = "/" ]]
	then
		doc_mount=${arg}
	else
		doc_mount=${arg:h}
	fi

	printf %s "${doc_mount:A}"

	# validation
	[[ -d "$doc_mount" ]] && return
	${SETTINGS[create_missing_paths]} || return $ERR_NO_DOC_MOUNT
	mkdir -p $doc_mount > /dev/null || return $ERR_NO_NEW_DOC_MOUNT
}


get_target(){ local target=${1:A} directory=${2:A}
	printf "%s" "$target"
	[[ -d $target || -f $target || ! -e $target ]] || return $ERR_BAD_TARGET
	[[ $target = $directory*  ]] || return $ERR_NO_ACCESS
}


get_ws_doc(){ local directory=$1 target=$2 segments segment
	segments=${(s:/:)target#$directory}
	printf '\\%s' "${segments[@]}"
	# validation
	for segment in $segments
	do
		is_valid_dos_name || return $BAD_DOS_NAME
	done
}


set_WORDSTAR_ARGS(){ local wordstar_document="$1"
 	WORDSTAR_ARGS+=( "/h${SETTINGS[help_level]}" "$wordstar_document" )
}

set_DOSBOX_ARGS(){ local mount_path="$1"
	DOSBOX_ARGS+=(
		-conf "${SETTINGS[dosbox_config_path]}"
		-set mapperfile="${SETTINGS[dosbox_mapper_path]}"
		-c "@mount -q ${SETTINGS[mount_drive]%:}: \"${mount_path}\""
		-c "@${SETTINGS[mount_drive]%:}:"
		-c "@mount -q C: \"${SETTINGS[c_mount_path]}\""
	)

	if $SETTINGS[fullscreen]
	then
		DOSBOX_ARGS+=(-fullscreen)
	fi

	if ${SETTINGS[shell_only]}
	then
		DOSBOX_ARGS+=(
			-c "@mount D:"
			-c "@echo WordStar arguments are: ${WORDSTAR_ARGS[*]}"
		)
	else
		DOSBOX_ARGS+=(
			-c "@${SETTINGS[wordstar_executable]} ${WORDSTAR_ARGS[*]}"
			-c "@EXIT"
		)
	fi
}

launch_dosbox(){
	if ${SETTINGS[verbose]}
	then
		"${SETTINGS[dosbox_path]}" "${DOSBOX_ARGS[@]}"
	else
		"${SETTINGS[dosbox_path]}" "${DOSBOX_ARGS[@]}" &> /dev/null
	fi
}

die_by(){
	case $? in
	$ERR_BAD_OPTIONS)
		die "${1#* }";;
	$ERR_NO_DOSBOX)
		die "cant execute dosbox-x: '$1'";;
	$ERR_NO_CONFIG)
		die "cant read config file: '$1'.";;
	$ERR_NO_C_MOUNT)
		die "cant find C: mount path: '$1'.";;
	$ERR_NO_DOC_MOUNT)
		die "'$1' is not a directory, use the -p option to create it.";;
	$ERR_NO_NEW_DOC_MOUNT)
		die "cannot create directory '$1' for document mount-point.";;
	$ERR_NO_ACCESS)
		die "document '$1' not within mounted tree rooted at '$2'.";;
	$ERR_BAD_TARGET)
		die "target document '$1' exists and is not a file or directory.";;
	$ERR_BAD_DOS_NAME)
		die "path to '$1' not in DOS 8.3 format";;
	$ERR_INVALID_PARAMETER)
		die "invalid $1: '$2'";;
	0)
		die "$@";;
	*)
		die "unknown error '$?' with arguments '$*' ";;
	esac
}

function process_option(){ local key=$1 value=${2:-}
	case $key in
	help) help; exit;;
	version) version; exit;;
	config) SETTINGS[dosbox_config_path]=$value;;
	mapper) SETTINGS[dosbox_mapper_path]=$value;;
	c-drive) SETTINGS[c_mount_path]=$value;;
	shell) SETTINGS[shell_only]=true;;
	verbose) SETTINGS[verbose]=true;;
	fullscreen) SETTINGS[fullscreen]=true;;
	window) SETTINGS[fullscreen]=false;;
	paths) SETTINGS[create_missing_paths]=true ;;
	documents) SETTINGS[documents_mount_path]="$value";;
	preset) case $value in
		pristine) SETTINGS[wordstar_executable]=PRISTINE;;
		subdues) SETTINGS[wordstar_executable]=WSRJS;;
		sawyer) SETTINGS[wordstar_executable]=SAWYER;;
		*) error_no ERR_INVALID_PARAMETER preset $value;;
		esac;;
	helplevel) case $value in
		<0-4>) SETTINGS[help_level]=$value;;
		*) error_no ERR_INVALID_PARAMETER help-level $value;;
		esac;;
	dosbox-x) SETTINGS[dosbox_path]=$value;;
	*) error_no ERR_INVALID_PARAMETER option $key;;
	esac
}

is_valid_dos_name(){ local filename=$1
	/usr/bin/grep -qE '^[A-Za-z0-9!#$%&'"'"'()@^_`{}~-]{1,8}(\.[A-Za-z0-9!#$%&'"'"'()@^_`{}~-]{0,3})?$' <<<"$filename"
}

version(){
	/usr/bin/awk '/^#!/{next}/^#/{sub("^# *","");print;next}{exit}' "$ZSH_ARGZERO"
}

die(){ local message=$1 code=${2:-$?}
	print -r $message >&2
	exit $code
}

help_opts(){ /usr/bin/awk '
# help_opts v1.0 2024-08-17

function initialize_option(){
	OPTION_BUFFER=""
	REQUIRED_ARGUMENT=0
	OPTIONAL_ARGUMENT=0
}
function add_option(name,key,req_arg,opt_arg){
	OPTIONS=OPTIONS" "name""(req_arg ? ":" : (opt_arg ? "::" : ""))(key?"="key:"")
}
function end_of_option(a,key,o){
	split(OPTION_BUFFER,a," ")
	key=a[1]
	delete a[1]
	add_option(key,"",REQUIRED_ARGUMENT,OPTIONAL_ARGUMENT)
	for (o in a) add_option(a[o],key,REQUIRED_ARGUMENT,OPTIONAL_ARGUMENT)
	initialize_option()
}
BEGIN{
	FS="[\t, ]+"
	initialize_option()
	OPTIONS=""
}
/\s*[^-]/{
	for ( f=1; f<=NF; f++)
		if ($f=="")
			continue
		else if (match($f, /^--?[a-zA-Z0-9][a-zA-Z0-9_-]*$/))
			OPTION_BUFFER=substr($f,2)" "OPTION_BUFFER
		else if (match($f, /^<.*>$/))
			REQUIRED_ARGUMENT=1
		else if (match($f, /^\[<.*>\]$/))
			OPTIONAL_ARGUMENT=1
		else
			end_of_option()
}
{
	if (OPTION_BUFFER) end_of_option()
}
END {
	print OPTIONS
}

'
}
main "$@"


